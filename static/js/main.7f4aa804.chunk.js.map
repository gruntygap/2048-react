{"version":3,"sources":["Game.ts","Board.tsx","serviceWorker.ts","index.tsx"],"names":["rotateLeft","matrix","rows","length","cols","endState","row","push","column","Game","options","Object","classCallCheck","this","state","num","board","Array","i","count","j","object","value","key","createBoard","addPiece","randomX","Math","floor","random","randomY","pieceSet","boardFull","console","warn","hasChanged","map","min","k","dir","gameOver","slideLeft","Tile","props","styling","width","height","display","borderRadius","verticalAlign","margin","number","react_default","a","createElement","className","class","style","undefined","Board","_this","possibleConstructorReturn","getPrototypeOf","call","handleKeyDown","bind","assertThisInitialized","game","window","addEventListener","removeEventListener","e","includes","keyCode","preventDefault","newGame","move","37","38","39","40","setState","Board_Tile","Component","Boolean","location","hostname","match","ReactDOM","render","src_Board_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f4aa804.chunk.js","sourcesContent":["\n/**\n * Creates the \"board\" of 2048\n * @param num - The x by x dimensions you want to give the game\n */\nfunction createBoard(num: number) {\n    let board = Array(num);\n    for (let i = 0; i < num; i++)\n        board[i] = Array(num);\n\n    let count = 0;\n    for (let i = 0; i < num; i++) {\n        for (let j = 0; j < num; j++) {\n            let object = {value: 0, key: count};\n            board[i][j] = object;\n            count++;\n        }\n    }\n    return board;\n}\n\nfunction rotateLeft(matrix: GameState) {\n    let rows = matrix.length;\n    let cols = matrix[0].length;\n    let endState: GameState = [];\n    for (let row = 0; row < rows; ++row) {\n        endState.push([]);\n        for (var column = 0; column < cols; ++column) {\n            endState[row][column] = matrix[column][cols - row - 1];\n        }\n    }\n    return endState;\n}\n\ninterface IData {\n    value: number;\n    key: number;\n}\n\ntype GameState = Array<Array<IData>>;\n\nclass Game {\n    state!: GameState;\n\n    constructor(options?: Game){\n        this.state = options ? options.state : createBoard(4);\n        if (!options) {\n            this.addPiece();\n            this.addPiece();\n        }\n    }\n\n    addPiece() {\n        let randomX = Math.floor(Math.random() * (4 - 0)) + 0;\n        let randomY = Math.floor(Math.random() * (4 - 0)) + 0;\n        let board = this.state;\n        let pieceSet = false;\n        while (!pieceSet) {\n            if (this.boardFull()) {\n                console.warn(\"CANNOT PLACE ANYMORE PIECES?!\");\n                break;\n            }\n            if (board[randomX][randomY].value == 0) {\n                board[randomX][randomY].value = 2;\n                pieceSet = true;\n            } else {\n                randomX = Math.floor(Math.random() * (4 - 0)) + 0;\n                randomY = Math.floor(Math.random() * (4 - 0)) + 0; \n            }\n        }\n        this.state = board;\n    }\n\n    boardFull() {\n        let test = false;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                if (this.state[i][j].value == 0) {\n                    return test;\n                }\n            }\n        }\n        return true;\n    }\n\n    gameOver() {\n        if (this.boardFull()) {\n            // If there are no places to merge.\n            // Return true\n            for (let i = 0; i < this.state.length; i++) {\n                for (let j = 0; j < this.state.length; j++) {\n                    // Checks the tile to the right\n                    if (j < this.state.length - 1) {\n                        if (this.state[i][j].value == this.state[i][j+1].value)\n                            return false;\n                    }\n                    // Checks the tile to the left\n                    if (j > 0) {\n                        if (this.state[i][j].value == this.state[i][j-1].value)\n                            return false;\n                    }\n                    // Checks the tile above\n                    if (i < this.state.length - 1) {\n                        if (this.state[i][j].value == this.state[i+1][j].value)\n                            return false;\n                    }\n                    // Checks the tile below\n                    if (i > 0) {\n                        if (this.state[i][j].value == this.state[i-1][j].value)\n                            return false;\n                    }\n                }\n            }\n            // Otherwise\n            return true;\n        }\n        return false;\n    }\n\n    slideLeft(options?: GameState) {\n        let board = options ? options : this.state;\n        let hasChanged = false;\n        board = board.map((i: Array<IData>) => {\n            let min = 0\n            for (let j = 0; j < i.length; j++) {\n                if (i[j].value !== 0) {\n                    for (let k = j; k > min; k--) {\n                        if (i[k-1].value === 0) {\n                            i[k-1].value = i[k].value;\n                            i[k].value = 0;\n                            hasChanged = true;\n                        }\n                        if (i[k-1].value === i[k].value) {\n                            i[k-1].value = i[k-1].value + i[k].value;\n                            min = k-1;\n                            i[k].value = 0;\n                            hasChanged = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            return i;\n        });\n        this.state = board;\n        return hasChanged;\n    }\n\n    move(dir: 'left'|'up'|'down'|'left') {\n        if (this.gameOver()) {\n            console.warn(\"Game over, you lost.\");\n            return;\n        }\n        let board: GameState = this.state;\n        let hasChanged = false;\n        if (dir == 'left') {\n            hasChanged = this.slideLeft();\n        } else if (dir == 'up') {\n            for (let i = 0; i < 1; i++){\n                board = rotateLeft(board);\n            }\n            hasChanged = this.slideLeft(board);\n            for (let i = 1; i < 4; i++) {\n                board = rotateLeft(board);\n            }\n        } else if (dir == 'down') {\n            for (let i = 0; i < 3; i++){\n                board = rotateLeft(board);\n            }\n            hasChanged = this.slideLeft(board);\n            for (let i = 3; i < 4; i++) {\n                board = rotateLeft(board);\n            }\n        } else if (dir == 'right') {\n            for (let i = 0; i < 2; i++){\n                board = rotateLeft(board);\n            }\n            hasChanged = this.slideLeft(board);\n            for (let i = 2; i < 4; i++) {\n                board = rotateLeft(board);\n            }\n        }\n        this.state = board;\n        if (hasChanged) {\n            this.addPiece();\n        }\n    }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport './Board.css';\nimport Game from './Game';\n\nconst Tile: React.SFC<{number?: number, class?: string}> = (props) => {\n    const styling: any = {\n        width: \"50px\",\n        height: \"50px\",\n        display: \"inline-block\",\n        borderRadius: \"10px\",\n        verticalAlign: \"middle\",\n        margin: \"10px 10px 10px 10px\"\n    };\n\n    styling['backgroundColor'] = props.number == 2 ? \"#33CEFF\" : \n        props.number == 4 ? \"#FF3368\" : props.number == 8 ? \"#3368FF\" :\n        props.number == 16 ? \"#00f5e0\" : props.number == 32 ? \"#CA33FF\" :\n        props.number == 64 ? \"#ff6df3\" : props.number == 128 ? \"#25ff00\" :\n        props.number == 256 ? \"#6faeff\" : props.number == 512 ? \"#FF33CE\" :\n        props.number == 1024 ? \"#ff6969\" : props.number == 2048 ? \"#ffd533\" : \"#ececec\";\n    return <span className={props.class} style={styling}><p>{props.number != 0 ? props.number : undefined}</p></span>;\n}\n\ninterface IData {\n    value: number;\n    key: number;\n}\n\nclass Board extends Component<{}, { game: Game }> {\n    constructor(props: any) {\n        super(props);\n        this.handleKeyDown = this.handleKeyDown.bind(this)\n        this.state = {\n            game: new Game()\n        }\n    }\n    \n    componentDidMount() {\n        window.addEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    handleKeyDown(e: KeyboardEvent) {\n        const keyCodes: Array<number> = [ 37, 38, 39, 40 ];\n        const labels: any = { 37: 'left', 38: 'up', 39: 'right', 40: 'down' };\n\n        if (keyCodes.includes(e.keyCode)) {\n            e.preventDefault();\n            const newGame = new Game(this.state.game);\n            newGame.move(labels[e.keyCode]);\n            this.setState({game: newGame});\n        }\n    }\n\n    render() {\n        let count = -1;\n        return (\n            <div className=\"Board\">\n                <p>Testing the colors of the Tiles</p>\n                <Tile number={2}/>\n                <Tile number={4}/>\n                <Tile number={8}/>\n                <Tile number={16}/>\n                <Tile number={32}/>\n                <Tile number={64}/>\n                <Tile number={128}/>\n                <Tile number={256}/>\n                <Tile number={512}/>\n                <Tile number={1024}/>\n                <Tile number={2048}/>\n                <Tile/>\n                <p>Beta Game Board</p>\n                {this.state.game.state.map((i: Array<IData>)=>{\n                    count++;\n                    return <div key={count}>\n                        {i.map((j: IData)=>{\n                            return <Tile key={j.key} number={j.value}/>\n                        })}\n                    </div>;\n                })}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}