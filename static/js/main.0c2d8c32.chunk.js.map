{"version":3,"sources":["Game.ts","Board.tsx","serviceWorker.ts","index.tsx"],"names":["rotateLeft","matrix","rows","length","cols","endState","row","push","column","Game","options","Object","classCallCheck","this","state","score","gameOver","num","board","Array","i","count","j","object","value","key","new","createBoard","addPiece","randomX","Math","floor","random","randomY","pieceSet","boardFull","console","warn","hasChanged","pointsGained","map","min","k","dir","isGameOver","removeNew","slideLeft","Tile","props","styling","width","height","display","borderRadius","verticalAlign","margin","number","react_default","a","createElement","className","class","style","Fragment","undefined","Board","_this","possibleConstructorReturn","getPrototypeOf","call","startX","startY","handleKeyDown","bind","assertThisInitialized","game","window","addEventListener","removeEventListener","e","includes","keyCode","preventDefault","newGame","move","37","38","39","40","setState","touches","screenX","screenY","changedTouches","deltaX","deltaY","direction","abs","_this2","bttn","onClick","onTouchStart","handleTouchStart","onTouchEnd","handleTouchEnd","Board_Tile","Component","Boolean","location","hostname","match","ReactDOM","render","src_Board_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c2d8c32.chunk.js","sourcesContent":["\n/**\n * Creates the \"board\" of 2048\n * @param num - The x by x dimensions you want to give the game\n */\nfunction createBoard(num: number) {\n    let board = Array(num);\n    for (let i = 0; i < num; i++)\n        board[i] = Array(num);\n\n    let count = 0;\n    for (let i = 0; i < num; i++) {\n        for (let j = 0; j < num; j++) {\n            let object = {value: 0, key: count, new: false};\n            board[i][j] = object;\n            count++;\n        }\n    }\n    return board;\n}\n\nfunction rotateLeft(matrix: GameState) {\n    let rows = matrix.length;\n    let cols = matrix[0].length;\n    let endState: GameState = [];\n    for (let row = 0; row < rows; ++row) {\n        endState.push([]);\n        for (var column = 0; column < cols; ++column) {\n            endState[row][column] = matrix[column][cols - row - 1];\n        }\n    }\n    return endState;\n}\n\ninterface IData {\n    value: number;\n    key: number;\n    new: boolean;\n}\n\ntype GameState = Array<Array<IData>>;\n\nclass Game {\n    state!: GameState;\n    score: number;\n    gameOver: boolean;\n\n    constructor(options?: Game){\n        this.state = options ? options.state : createBoard(4);\n        this.score = options ? options.score : 0;\n        this.gameOver = options ? options.gameOver : false;\n        if (!options) {\n            this.addPiece();\n            this.addPiece();\n        }\n    }\n\n    removeNew() {\n        for (let i = 0; i < this.state.length; i++) {\n            for (let j = 0; j < this.state.length; j++) {\n                this.state[i][j].new = false;\n            }\n        }\n    }\n    addPiece() {\n        let randomX = Math.floor(Math.random() * (4 - 0)) + 0;\n        let randomY = Math.floor(Math.random() * (4 - 0)) + 0;\n        let board = this.state;\n        let pieceSet = false;\n        while (!pieceSet) {\n            if (this.boardFull()) {\n                console.warn(\"CANNOT PLACE ANYMORE PIECES?!\");\n                break;\n            }\n            if (board[randomX][randomY].value == 0) {\n                board[randomX][randomY].value = 2;\n                board[randomX][randomY].new = true;\n                pieceSet = true;\n            } else {\n                randomX = Math.floor(Math.random() * (4 - 0)) + 0;\n                randomY = Math.floor(Math.random() * (4 - 0)) + 0; \n            }\n        }\n        this.state = board;\n    }\n\n    boardFull() {\n        let test = false;\n        for (let i = 0; i < this.state.length; i++) {\n            for (let j = 0; j < this.state.length; j++) {\n                if (this.state[i][j].value == 0) {\n                    return test;\n                }\n            }\n        }\n        return true;\n    }\n\n    isGameOver() {\n        if (this.boardFull()) {\n            // If there are no places to merge.\n            // Return true\n            for (let i = 0; i < this.state.length; i++) {\n                for (let j = 0; j < this.state.length; j++) {\n                    // Checks the tile to the right\n                    if (j < this.state.length - 1) {\n                        if (this.state[i][j].value == this.state[i][j+1].value)\n                            return false;\n                    }\n                    // Checks the tile to the left\n                    if (j > 0) {\n                        if (this.state[i][j].value == this.state[i][j-1].value)\n                            return false;\n                    }\n                    // Checks the tile above\n                    if (i < this.state.length - 1) {\n                        if (this.state[i][j].value == this.state[i+1][j].value)\n                            return false;\n                    }\n                    // Checks the tile below\n                    if (i > 0) {\n                        if (this.state[i][j].value == this.state[i-1][j].value)\n                            return false;\n                    }\n                }\n            }\n            // Otherwise\n            this.gameOver = true;\n            return true;\n        }\n        return false;\n    }\n\n    slideLeft(options?: GameState) {\n        let board = options ? options : this.state;\n        let hasChanged = false;\n        let pointsGained = 0;\n        board = board.map((i: Array<IData>) => {\n            let min = 0\n            for (let j = 0; j < i.length; j++) {\n                if (i[j].value !== 0) {\n                    for (let k = j; k > min; k--) {\n                        if (i[k-1].value === 0) {\n                            i[k-1].value = i[k].value;\n                            i[k].value = 0;\n                            hasChanged = true;\n                        }\n                        // Merge section\n                        if (i[k-1].value === i[k].value) {\n                            i[k-1].value = i[k-1].value + i[k].value;\n                            pointsGained += i[k-1].value;\n                            min = k-1;\n                            i[k].value = 0;\n                            hasChanged = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            return i;\n        });\n        this.state = board;\n        this.score = this.score + pointsGained;\n        return hasChanged;\n    }\n\n    move(dir: 'left'|'up'|'down'|'right') {\n        if (this.isGameOver()) {\n            console.warn(\"Game over, you lost.\");\n            this.removeNew();\n            return;\n        }\n        let board: GameState = this.state;\n        let hasChanged = false;\n        if (dir == 'left') {\n            hasChanged = this.slideLeft();\n        } else if (dir == 'up') {\n            for (let i = 0; i < 1; i++){\n                board = rotateLeft(board);\n            }\n            hasChanged = this.slideLeft(board);\n            for (let i = 1; i < 4; i++) {\n                board = rotateLeft(board);\n            }\n        } else if (dir == 'down') {\n            for (let i = 0; i < 3; i++){\n                board = rotateLeft(board);\n            }\n            hasChanged = this.slideLeft(board);\n            for (let i = 3; i < 4; i++) {\n                board = rotateLeft(board);\n            }\n        } else if (dir == 'right') {\n            for (let i = 0; i < 2; i++){\n                board = rotateLeft(board);\n            }\n            hasChanged = this.slideLeft(board);\n            for (let i = 2; i < 4; i++) {\n                board = rotateLeft(board);\n            }\n        }\n        this.state = board;\n        if (hasChanged) {\n            this.removeNew();\n            this.addPiece();\n        }\n    }\n}\n\nexport default Game;","import React, { Component } from 'react';\nimport './Board.css';\nimport Game from './Game';\n\nconst Tile: React.SFC<{number?: number, class?: string}> = (props) => {\n    const styling: any = {\n        width: \"50px\",\n        height: \"50px\",\n        display: \"inline-block\",\n        borderRadius: \"10px\",\n        verticalAlign: \"middle\",\n        margin: \"10px 10px 10px 10px\"\n    };\n\n    styling['backgroundColor'] = props.number == 2 ? \"#33CEFF\" : \n        props.number == 4 ? \"#FF3368\" : props.number == 8 ? \"#3368FF\" :\n        props.number == 16 ? \"#00f5e0\" : props.number == 32 ? \"#CA33FF\" :\n        props.number == 64 ? \"#ff6df3\" : props.number == 128 ? \"#25ff00\" :\n        props.number == 256 ? \"#6faeff\" : props.number == 512 ? \"#FF33CE\" :\n        props.number == 1024 ? \"#ff6969\" : props.number == 2048 ? \"#ffd533\" : \"#ececec\";\n    return <span className={props.class} style={styling}><>{props.number != 0 ? props.number : undefined}</></span>;\n}\n\ninterface IData {\n    value: number;\n    key: number;\n    new: boolean;\n}\n\nclass Board extends Component<{}, { game: Game }> {\n    startX: number;\n    startY: number;\n\n    constructor(props: any) {\n        super(props);\n        this.handleKeyDown = this.handleKeyDown.bind(this)\n        this.startX = 0;\n        this.startY = 0;\n        this.state = {\n            game: new Game()\n        }\n    }\n    \n    componentDidMount() {\n        window.addEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"keydown\", this.handleKeyDown);\n    }\n\n    handleKeyDown(e: KeyboardEvent) {\n        const keyCodes: Array<number> = [ 37, 38, 39, 40 ];\n        const labels: any = { 37: 'left', 38: 'up', 39: 'right', 40: 'down' };\n\n        if (keyCodes.includes(e.keyCode)) {\n            e.preventDefault();\n            const newGame = new Game(this.state.game);\n            newGame.move(labels[e.keyCode]);\n            this.setState({game: newGame});\n        }\n    }\n\n    handleTouchStart(e: React.TouchEvent<HTMLDivElement>) {\n        if (this.state.game.gameOver) {\n          return;\n        }\n        if (e.touches.length != 1) {\n          return;\n        }\n        this.startX = e.touches[0].screenX;\n        this.startY = e.touches[0].screenY;\n        e.preventDefault();\n      }\n\n      handleTouchEnd(e: React.TouchEvent<HTMLDivElement>) {\n        if (this.state.game.gameOver) {\n          return;\n        }\n        if (e.changedTouches.length != 1) {\n          return;\n        }\n        var deltaX = e.changedTouches[0].screenX - this.startX;\n        var deltaY = e.changedTouches[0].screenY - this.startY;\n        var direction = -1;\n        // Code sourced from:\n        // https://github.com/IvanVergiliev/2048-react/blob/master/src/index.js\n        if (Math.abs(deltaX) > 3 * Math.abs(deltaY) && Math.abs(deltaX) > 30) {\n          direction = deltaX > 0 ? 2 : 0;\n        } else if (Math.abs(deltaY) > 3 * Math.abs(deltaX) && Math.abs(deltaY) > 30) {\n          direction = deltaY > 0 ? 3 : 1;\n        }\n        if (direction != -1) {\n            const labels: Array<'left'|'up'|'right'|'down'> = ['left', 'up', 'right', 'down'];\n            const newGame = new Game(this.state.game);\n            newGame.move(labels[direction]);\n            this.setState({game: newGame});\n        }\n        e.preventDefault();\n      }\n\n    render() {\n        let count = -1;\n        let gameOver: string = this.state.game.gameOver ? \"gameOver\" : \"game\";\n        const handleSubmit = (e: React.MouseEvent): void => {\n            e.preventDefault();\n            this.setState({game: new Game()});\n        };\n        const bttn = <button onClick={handleSubmit}>Restart</button>;\n        return (\n            <div className=\"Board\">\n                <h1>2048</h1>\n                <div className=\"score\">\n                    <p>Score: {this.state.game.score}</p>\n                    {this.state.game.gameOver ? bttn : <></> }\n                </div>\n                <div className={gameOver} onTouchStart={this.handleTouchStart.bind(this)} onTouchEnd={this.handleTouchEnd.bind(this)}>\n                    {this.state.game.state.map((i: Array<IData>)=>{\n                        count++;\n                        return <div className=\"row\" key={count}>\n                            {i.map((j: IData)=>{\n                                return j.new ? <Tile class={\"overlay\"} key={j.key} number={j.value}/> : <Tile key={j.key} number={j.value}/>;\n                            })}\n                        </div>;\n                    })}\n                </div>\n                {/* <p>Directions:</p>\n                <p>Use Arrow keys for desktop; use swipe gestures for mobile</p>\n                <p>Testing the colors of the Tiles</p>\n                <Tile number={2}/>\n                <Tile number={4}/>\n                <Tile number={8}/>\n                <Tile number={16}/>\n                <Tile number={32}/>\n                <Tile number={64}/>\n                <Tile number={128}/>\n                <Tile number={256}/>\n                <Tile number={512}/>\n                <Tile number={1024}/>\n                <Tile number={2048}/>\n                <Tile/> */}\n            </div>\n        );\n    }\n}\n\nexport default Board;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Board />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}